@startuml SecurePaymentConfirmation-Pilot-Checkout

skinparam sequence {
    ParticipantBackgroundColor #FFFFFF
    ParticipantBorderColor #000000
    ParticipantBorderThickness 1
}
skinparam DefaultFontColor #000000
skinparam DefaultFontName "Helvetica"
skinparam DefaultFontSize 12
skinparam ArrowColor #000000
skinparam NoteBackgroundColor #C0E4F0
skinparam NoteBorderColor #000000
skinparam NoteBorderThickness 1
skinparam Shadowing false

participant User
participant "PSP Merchant Library\n(e.g. Stripe Element)" as Element
participant Browser
participant "OS as\nFIDO Platform" as Platform
participant "PSP\nService Worker" as PSP_SW
participant "PSP\nFrontend" as PSP
participant "Issuer\nFrontend" as Issuer
participant "Issuer\nACS Server" as IssuerBE

Note over PSP_SW, PSP: PSP Payment Handler

User -> Element: Fills out checkout form: cc#, etc.

Note over User, IssuerBE: (1) New WebAuthn-to-Pay (aka Secure Payment Confirmation) flow

Element -> IssuerBE: AReq: cc#, tx details
Note over Element, IssuerBE #FFCFD9
New behavior: Issuer returns credential IDs associated with cc#
end note

IssuerBE -> Element: ARes: acsURL, credentialIDs associated with cc#, networkData

Element -> Browser: let result = await window.PublicKeyCredential.\n    isUserVerifyingPlatformAuthenticatorAvailable()
activate Browser #FFBBBB
Browser -> Element: result.resolve(true)
deactivate Browser

Note over Element, Browser
  Passing credential IDs to PaymentRequest constructor
  via payment method specific data
end note
Element -> Browser: let request = new PaymentRequest()
activate Browser #FFBBBB
Element -> Browser: let response = await request.show()

Note over User, Platform #EDD980
  Open question: What happens if there is no matching credential? Showing UI adds unnecesssary risk. Need to evaluate the credential probing risk if not showing any UI.
end note

Note over User, Browser #FFCFD9
  New behavior. Browser native UI showing tx details and call-to-action
end note
Browser -> User: Native Minimal UI prompt: Verify payment of XX [CUR] to YY? [Verify][Cancel]
User -> Browser: Tap [Verify]

alt User tapped [Verify]
    Note over Browser, Platform #FFCFD9
    New behavior. Bypassing the RP origin check:
    Credential is bound to RP = bank.com
    Browser is allowing psp.com to exercise this credential
    end note

    Browser -> Browser: Constructs Web Payment Cryptogram, paymentData
    Note over Browser #FFCFD9
      New behavior: Browser combines merchant origin with other data submitted via PaymentRequest.
      let paymentData = {
          merchantData: {
              total: { currency: "USD", value: "55.00" },
              merchantOrigin: "https://fancychairs.example"
          },
          networkData: {
                orderId: "pi_1CuYEebQz8SHA",
                cardAcceptor: "414325/BXB5YHO1L0NXPYL"
          }
      };
    end note

    Browser -> Platform: InternalGetWebAuthnCredentials(challenge=hash(paymentData))
    activate Platform #FFBBBB
    Platform -> User: System prompt
    User -> Platform: Touch biometrics sensor
    Platform -> Browser: InternalGetWebAuthnCredentialsResponse
    deactivate Platform

else User tapped [Cancel]

    Note over Browser, Platform: Make SecurePaymentConfirmationResponse with status = FAILED 

end alt

Note over Browser, PSP_SW #EDD980
Open question: Does returning the response directly to the merchant here create a credential probing threat?
end note

Note over Browser, PSP_SW #FFCFD9
New API:
dictionary SecurePaymentConfirmationResponse {
  required DOMString status;
  WebPaymentCryptogram paymentData;
  PublicKeyCredential credential;
}
end note

Browser -> Element: SecurePaymentConfirmationResponse
deactivate Browser

alt securePaymentConfirmationResponse.status = OK

    Note over Element, IssuerBE: (2a) Submit WebAuthn credential to Issuer
    Element -> IssuerBE: Submit PublicKeyCredential
    IssuerBE -> Element: Authentication response

    Note over Element, IssuerBE: If authentication fails, go to (2b)

else securePaymentConfirmationResponse.status = FAILED

    Note over Element, IssuerBE: (2b) Fallback to vanilla 3DS flow inside the secure modal window
    Element -> Browser: let request2 = new PaymentRequest();
    activate Browser #FFBBBB
    Element -> Browser: let response2 = await request.show();
    Browser -> PSP_SW: "paymentrequest" event
    PSP_SW -> PSP: event.openWindow()
    activate PSP #FFBBBB
    PSP -> Issuer: redirect to 3DS slow
    activate Issuer #FFBBBB
    Issuer -> User: Display SMS OTP flow
    User -> Issuer: Enters SMS confirmation code
    Issuer -> IssuerBE: Authenticate
    IssuerBE -> Issuer: Authentication response
    Issuer -> PSP: redirect
    deactivate Issuer
    PSP -> PSP_SW: postMessage('done')
    deactivate PSP
    PSP_SW -> Browser: PaymentHandlerResponse
    deactivate PSP_SW
    Browser -> Element: Resolves response2
    deactivate Browser
end

'Note over Browser, Issuer: (3) Resolve PaymentRequestEvent

Element -> User: Notify merchant,\nwhich displays order confirmation

@enduml