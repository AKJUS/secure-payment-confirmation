@startuml SecurePaymentConfirmation-Pilot-Enrollment

skinparam sequence {
    ParticipantBackgroundColor #FFFFFF
    ParticipantBorderColor #000000
    ParticipantBorderThickness 1
}
skinparam DefaultFontColor #000000
skinparam DefaultFontName "Helvetica"
skinparam DefaultFontSize 12
skinparam ArrowColor #000000
skinparam NoteBackgroundColor #C0E4F0
skinparam NoteBorderColor #000000
skinparam NoteBorderThickness 1
skinparam Shadowing false

participant User
participant "PSP Merchant Library\n(e.g. Stripe Element)" as Element
participant Browser
participant "OS as\nFIDO Platform" as Platform
participant "PSP\nService Worker" as PSP_SW
participant "PSP\nFrontend" as PSP
participant "Issuer\nFrontend" as Issuer
participant "Issuer\nACS Server" as IssuerBE

Note over PSP_SW, PSP: PSP Payment Handler

User -> Element: Fills out checkout form: cc#, etc.

Note over Element, PSP: (1) Launch secure modal window using JIT payment handler & skip-the-sheet
Note over Element, PSP #EDD980
  Open Question:
  The only purpose of the PSP payment handler during enrollment is to open the secure modal window.
  Should there be a Secure Modal Window API instead to simplify the system? 
end note

Element -> Browser: let request = new PaymentRequest()
activate Browser #FFDEDE
Element -> Browser: let response = await request.show()

Browser -> PSP_SW: "paymentrequest" event
activate PSP_SW #FFBBBB

Note over PSP, IssuerBE: (2) Vanilla 3DS flow inside the secure modal window
PSP_SW -> PSP: event.openWindow()
activate PSP #FFBBBB
PSP -> Issuer: redirect to 3DS slow
Issuer -> User: Display SMS OTP flow
User -> Issuer: Enters SMS confirmation code
Issuer -> IssuerBE: Authenticate
IssuerBE -> Issuer: Authentication response

Note over PSP_SW, IssuerBE #EDD980
    Open question:
    The user is authenticated at this point.
    Does the Issuer need to communicate this back to Stripe Element?
end note

Note over User, IssuerBE: (3) Secure Payment Confirmation Enrollment
Issuer -> Browser: let result = window.PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();
Browser -> Issuer: result.resolve(availability)
opt isUserVerifyingPlatformAuthenticatorAvailable = true
Issuer -> User: Display TouchID Call to Action
User -> Issuer: User gesture

    opt User opts in to enrollment

        'Note over Browser, IssuerBE: (4) Vanilla WebAuthn credential creation
        'Issuer -> Browser: await navigator.credentials.create()
        Issuer -> Browser: Create new credential for instrument
        Note right of Browser #FFCFD9
        New API:
        let promise = window.SecurePaymentConfirmation.instruments.set(
            "Q1J4AwSWD4Dx6q1DTo0MB21XDAV76",  // instrument ID
            challenge,
            {
                name: "Visa BankAmericard 路路路路1234"
                icon: "..."
            }
        );
        end note

        activate Browser #FFBBBB

        Browser -> Platform: InternalWebAuthnCreateCredential()
        activate Platform #FFBBBB
        Platform -> User: System prompt
        User -> Platform: Touch biometrics sensor
        Platform -> Browser: PublicKeyCredentialCreationResponse
        deactivate Platform

        Browser -> Browser: Create a new SecurePaymentConfirmation\nand associate with newly created credential ID.
        Browser -> Issuer: promise.resolve(PublicKeyCredential)
        deactivate Browser
        
        Issuer -> IssuerBE: Save PublicKeyCredential

    end
end


Note over Browser, Issuer: (4) Close the secure modal window
Issuer -> PSP: redirect
PSP -> PSP_SW: postMessage('done')
deactivate PSP

PSP_SW -> Browser: PaymentHandlerResponse
deactivate PSP_SW

Browser -> Element: Resolves response
deactivate Browser

Element -> User: Notify merchant,\nwhich displays order confirmation


@enduml